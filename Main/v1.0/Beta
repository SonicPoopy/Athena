local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/vozoid/ui-libraries/main/drawing/void/source.lua"))()

local watermark = library:Watermark("Athena | 60 fps | v1.0 | dev")
-- watermark:Set("Watermark Set")
-- watermark:Hide() -- toggles watermark

local main = library:Load{
    Name = "Athena, Beta",
    SizeX = 500,
    SizeY = 550,
    Theme = "Midnight",
    Extension = "json", -- config file extension
    Folder = "vozoid ui or something" -- config folder name
}

-- library.Extension = "txt" (config file extension)
-- library.Folder = "config folder name"

local legit = main:Tab("Legit")
local rage = main:Tab("Rage")
local misc = main:Tab("Misc")
local visuals = main:Tab("Visuals")
local blatant = main:Tab("Blatant")

local aimbot = legit:Section{
    Name = "Camlock",
    Side = "Left"
}

local silent = legit:Section{
    Name = "Silent Aim",
    Side = "Right"
}


local toggle = aimbot:Toggle{
    Name = "Enabled",
    Flag = "yes",
    Callback  = function(bool)
        getgenv().Settings.ThirdPerson = bool
        getgenv().Settings.FirstPerson = bool
    end
}

local box = aimbot:Box{
    Name = "Keybind",
    --Default = "hi",
    Placeholder = "Keybind",
    Flag = "yesnt",
    Callback = function(text)
        getgenv().Settings.AimlockKey = text
    end
}

local toggle = aimbot:Toggle{
    Name = "Notification",
    Flag = "ss",
    Callback  = function(bool)
        getgenv().Settings.Notificationmode = bool
    end
}

local toggle = aimbot:Toggle{
    Name = "Team Check",
    Flag = "bffr",
    Callback  = function(bool)
        getgenv().Settings.TeamCheck = bool
    end
}

local toggle = aimbot:Toggle{
    Name = "Air-Shot Func",
    Flag = "ok",
    Callback  = function(bool)
        getgenv().Settings.CheckIfJumped = bool
    end
}

aimbot:Dropdown{
    --Default = "Option 1",
    Content = {
        "Hit-Part",
        "Head",
        "UpperTorso",
        "HumanoidRootPart",
        "LowerTorso"
    },
    --Max = 5, -- turns into multidropdown
    --Scrollable = true, -- makes it scrollable
    --ScrollingMax = 5, -- caps the amount it contains before scrolling
    Flag = "fartzad",
    Callback = function(option)
        getgenv().Settings.AimPart = option
    end
}

aimbot:Dropdown{
    --Default = "Option 1",
    Content = {
        "Air-HitPart",
        "Head",
        "UpperTorso",
        "HumanoidRootPart",
        "LowerTorso",
        "RightUpperFoot"
    },
    --Max = 5, -- turns into multidropdown
    --Scrollable = true, -- makes it scrollable
    --ScrollingMax = 5, -- caps the amount it contains before scrolling
    Flag = "hello",
    Callback = function(option)
        getgenv().Settings.CheckIfJumpedpart = option
    end
}

aimbot:Slider{
    Text = "[value]/0.3",
    --Default = 5,
    Min = 0,
    Max = 0.3,
    Float = 0.005,
    Flag = "yeano",
    Callback = function(value)
        getgenv().Settings.PredictionVelocity = value
    end
}

local box = aimbot:Box{
    Name = "Prediction",
    --Default = "hi",
    Placeholder = "Prediction",
    Flag = "yeayeayea",
    Callback = function(text)
        getgenv().Settings.PredictionVelocity = text
    end
}

local seperator = aimbot:Separator("Smoothing")

local toggle = aimbot:Toggle{
    Name = "Enabled",
    Flag = "okokok",
    Callback  = function(bool)
        getgenv().Settings.Smoothness = bool
    end
}

aimbot:Slider{
    Text = "[value]/1",
    --Default = 5,
    Min = 0.0001,
    Max = 1,
    Float = 0.005,
    Flag = "yeano",
    Callback = function(value)
        getgenv().Settings.SmoothnessAmount = value
    end
}











































































































--library:SaveConfig("config", true) -- universal config
--library:SaveConfig("config") -- game specific config
--library:DeleteConfig("config", true) -- universal config
--library:DeleteConfig("config") -- game specific config
--library:GetConfigs(true) -- return universal and game specific configs (table)
--library:GetConfigs() -- return game specific configs (table)
--library:LoadConfig("config", true) -- load universal config
--library:LoadConfig("config") -- load game specific config

local configs = main:Tab("Settings")

local themes = configs:Section{Name = "Theme", Side = "Left"}

local themepickers = {}

local themelist = themes:Dropdown{
    Name = "Theme",
    Default = library.currenttheme,
    Content = library:GetThemes(),
    Flag = "Theme Dropdown",
    Callback = function(option)
        if option then
            library:SetTheme(option)

            for option, picker in next, themepickers do
                picker:Set(library.theme[option])
            end
        end
    end
}

library:ConfigIgnore("Theme Dropdown")

local namebox = themes:Box{
    Name = "Custom Theme Name",
    Placeholder = "Custom Theme",
    Flag = "Custom Theme"
}

library:ConfigIgnore("Custom Theme")

themes:Button{
    Name = "Save Custom Theme",
    Callback = function()
        if library:SaveCustomTheme(library.flags["Custom Theme"]) then
            themelist:Refresh(library:GetThemes())
            themelist:Set(library.flags["Custom Theme"])
            namebox:Set("")
        end
    end
}

local customtheme = configs:Section{Name = "Custom Theme", Side = "Right"}

themepickers["Accent"] = customtheme:ColorPicker{
    Name = "Accent",
    Default = library.theme["Accent"],
    Flag = "Accent",
    Callback = function(color)
        library:ChangeThemeOption("Accent", color)
    end
}

library:ConfigIgnore("Accent")

themepickers["Window Background"] = customtheme:ColorPicker{
    Name = "Window Background",
    Default = library.theme["Window Background"],
    Flag = "Window Background",
    Callback = function(color)
        library:ChangeThemeOption("Window Background", color)
    end
}

library:ConfigIgnore("Window Background")

themepickers["Window Border"] = customtheme:ColorPicker{
    Name = "Window Border",
    Default = library.theme["Window Border"],
    Flag = "Window Border",
    Callback = function(color)
        library:ChangeThemeOption("Window Border", color)
    end
}

library:ConfigIgnore("Window Border")

themepickers["Tab Background"] = customtheme:ColorPicker{
    Name = "Tab Background",
    Default = library.theme["Tab Background"],
    Flag = "Tab Background",
    Callback = function(color)
        library:ChangeThemeOption("Tab Background", color)
    end
}

library:ConfigIgnore("Tab Background")

themepickers["Tab Border"] = customtheme:ColorPicker{
    Name = "Tab Border",
    Default = library.theme["Tab Border"],
    Flag = "Tab Border",
    Callback = function(color)
        library:ChangeThemeOption("Tab Border", color)
    end
}

library:ConfigIgnore("Tab Border")

themepickers["Tab Toggle Background"] = customtheme:ColorPicker{
    Name = "Tab Toggle Background",
    Default = library.theme["Tab Toggle Background"],
    Flag = "Tab Toggle Background",
    Callback = function(color)
        library:ChangeThemeOption("Tab Toggle Background", color)
    end
}

library:ConfigIgnore("Tab Toggle Background")

themepickers["Section Background"] = customtheme:ColorPicker{
    Name = "Section Background",
    Default = library.theme["Section Background"],
    Flag = "Section Background",
    Callback = function(color)
        library:ChangeThemeOption("Section Background", color)
    end
}

library:ConfigIgnore("Section Background")

themepickers["Section Border"] = customtheme:ColorPicker{
    Name = "Section Border",
    Default = library.theme["Section Border"],
    Flag = "Section Border",
    Callback = function(color)
        library:ChangeThemeOption("Section Border", color)
    end
}

library:ConfigIgnore("Section Border")

themepickers["Text"] = customtheme:ColorPicker{
    Name = "Text",
    Default = library.theme["Text"],
    Flag = "Text",
    Callback = function(color)
        library:ChangeThemeOption("Text", color)
    end
}

library:ConfigIgnore("Text")

themepickers["Disabled Text"] = customtheme:ColorPicker{
    Name = "Disabled Text",
    Default = library.theme["Disabled Text"],
    Flag = "Disabled Text",
    Callback = function(color)
        library:ChangeThemeOption("Disabled Text", color)
    end
}

library:ConfigIgnore("Disabled Text")

themepickers["Object Background"] = customtheme:ColorPicker{
    Name = "Object Background",
    Default = library.theme["Object Background"],
    Flag = "Object Background",
    Callback = function(color)
        library:ChangeThemeOption("Object Background", color)
    end
}

library:ConfigIgnore("Object Background")

themepickers["Object Border"] = customtheme:ColorPicker{
    Name = "Object Border",
    Default = library.theme["Object Border"],
    Flag = "Object Border",
    Callback = function(color)
        library:ChangeThemeOption("Object Border", color)
    end
}

library:ConfigIgnore("Object Border")

themepickers["Dropdown Option Background"] = customtheme:ColorPicker{
    Name = "Dropdown Option Background",
    Default = library.theme["Dropdown Option Background"],
    Flag = "Dropdown Option Background",
    Callback = function(color)
        library:ChangeThemeOption("Dropdown Option Background", color)
    end
}

library:ConfigIgnore("Dropdown Option Background")

local configsection = configs:Section{Name = "Configs", Side = "Left"}

local configlist = configsection:Dropdown{
    Name = "Configs",
    Content = library:GetConfigs(), -- GetConfigs(true) if you want universal configs
    Flag = "Config Dropdown"
}

library:ConfigIgnore("Config Dropdown")

local loadconfig = configsection:Button{
    Name = "Load Config",
    Callback = function()
        library:LoadConfig(library.flags["Config Dropdown"]) -- LoadConfig(library.flags["Config Dropdown"], true)  if you want universal configs
    end
}

local delconfig = configsection:Button{
    Name = "Delete Config",
    Callback = function()
        library:DeleteConfig(library.flags["Config Dropdown"]) -- DeleteConfig(library.flags["Config Dropdown"], true)  if you want universal configs
        configlist:Refresh(library:GetConfigs())
    end
}


local configbox = configsection:Box{
    Name = "Config Name",
    Placeholder = "Config Name",
    Flag = "Config Name"
}

library:ConfigIgnore("Config Name")

local save = configsection:Button{
    Name = "Save Config",
    Callback = function()
        library:SaveConfig(library.flags["Config Dropdown"] or library.flags["Config Name"]) -- SaveConfig(library.flags["Config Name"], true) if you want universal configs
        configlist:Refresh(library:GetConfigs())
    end
}

local keybindsection = configs:Section{Name = "UI Toggle Keybind", Side = "Left"}

keybindsection:Keybind{
    Name = "UI Toggle",
    Flag = "UI Toggle",
    Default = Enum.KeyCode.RightShift,
    Blacklist = {Enum.UserInputType.MouseButton1, Enum.UserInputType.MouseButton2, Enum.UserInputType.MouseButton3},
    Callback = function(_, fromsetting)
        if not fromsetting then
            library:Close()
        end
    end
}

--library:Close()
--library:Unload()

getgenv().Settings = {
    AimlockKey = "m",
    AimPart = "Head",
    CheckIfJumpedpart = "UpperTorso",
    AimRadius = 100,
    Disableontargetdeath = true,
    Disableonplayerdeath = true,
    ThirdPerson = false,
    FirstPerson = false,
    Undergroundresolver = false,
    DetectAntiLock = false,
    AntiLockSpeedDetection = 70,
    TeamCheck = false,
    PredictMovement = true,
    PredictionVelocity = 0.16221418,
    CheckIfJumped = false,
    Smoothness = false,
    Notificationmode = false,
    SmoothnessAmount = 0.019
}

getgenv().Visual = {
    Thickness = 3.4,
    Transparency = 1,
    Color = Color3.fromRGB(0, 255, 0),
    FOV = false,
    LINE = false
}

getgenv().Misc = {
    PermKorblox = false,
    PermHeadless = false
}


loadstring(game:HttpGet("https://raw.githubusercontent.com/xwel333/aimlock/main/aimlock"))()

--getgenvsettings
if getgenv().AthenaKey == "GAbqDq2noE" then

else
    print("The Key Is incorrect.")
end
